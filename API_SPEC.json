swagger: '2.0'
info:
  version: 1.0.0
  title: ExperimentsAcl
basePath: /api
paths:
  '/Users/{id}/accessTokens/{fk}':
    get:
      tags:
        - User
      summary: Find a related item by id for accessTokens.
      operationId: User.prototype.__findById__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Delete a related item by id for accessTokens.
      operationId: User.prototype.__destroyById__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - User
      summary: Update a related item by id for accessTokens.
      operationId: User.prototype.__updateById__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Users/{id}/accessTokens':
    get:
      tags:
        - User
      summary: Queries accessTokens of User.
      operationId: User.prototype.__get__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - User
      summary: Creates a new instance in accessTokens of this model.
      operationId: User.prototype.__create__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Deletes all accessTokens of this model.
      operationId: User.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/accessTokens/count':
    get:
      tags:
        - User
      summary: Counts accessTokens of User.
      operationId: User.prototype.__count__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users:
    post:
      tags:
        - User
      summary: Create a new instance of the model and persist it into the data source.
      operationId: User.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    patch:
      tags:
        - User
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: User.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: User.replaceOrCreate__put_Users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    get:
      tags:
        - User
      summary: Find all instances of the model matched by filter from the data source.
      operationId: User.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      deprecated: false
  /Users/replaceOrCreate:
    post:
      tags:
        - User
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: User.replaceOrCreate__post_Users_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/upsertWithWhere:
    post:
      tags:
        - User
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: User.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/exists':
    get:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__get_Users_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Users/{id}':
    head:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__head_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - User
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: User.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'User.replaceById__put_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    delete:
      tags:
        - User
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: User.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - User
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: User.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/replace':
    post:
      tags:
        - User
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'User.replaceById__post_Users_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/findOne:
    get:
      tags:
        - User
      summary: Find first instance of the model matched by filter from the data source.
      operationId: User.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/update:
    post:
      tags:
        - User
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: User.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Users/count:
    get:
      tags:
        - User
      summary: Count instances of the model matched by where from the data source.
      operationId: User.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users/change-stream:
    post:
      tags:
        - User
      summary: Create a change stream.
      operationId: User.createChangeStream__post_Users_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - User
      summary: Create a change stream.
      operationId: User.createChangeStream__get_Users_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Users/login:
    post:
      tags:
        - User
      summary: Login a user with username/email and password.
      operationId: User.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:

                - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)

            type: object
      deprecated: false
  /Users/logout:
    post:
      tags:
        - User
      summary: Logout a user with access token.
      operationId: User.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/verify':
    post:
      tags:
        - User
      summary: Trigger user's identity verification with configured verifyOptions
      operationId: User.prototype.verify
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/confirm:
    get:
      tags:
        - User
      summary: Confirm a user registration with identity verification token.
      operationId: User.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset:
    post:
      tags:
        - User
      summary: Reset password for a user with email.
      operationId: User.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/change-password:
    post:
      tags:
        - User
      summary: Change a user's password.
      operationId: User.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset-password:
    post:
      tags:
        - User
      summary: Reset user's password via a password-reset token.
      operationId: User.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /ACLs:
    post:
      tags:
        - ACL
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ACL.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
    patch:
      tags:
        - ACL
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: ACL.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
    put:
      tags:
        - ACL
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: ACL.replaceOrCreate__put_ACLs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
    get:
      tags:
        - ACL
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ACL.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ACL'
      deprecated: false
  /ACLs/replaceOrCreate:
    post:
      tags:
        - ACL
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: ACL.replaceOrCreate__post_ACLs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
  /ACLs/upsertWithWhere:
    post:
      tags:
        - ACL
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: ACL.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
  '/ACLs/{id}/exists':
    get:
      tags:
        - ACL
      summary: Check whether a model instance exists in the data source.
      operationId: 'ACL.exists__get_ACLs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ACLs/{id}':
    head:
      tags:
        - ACL
      summary: Check whether a model instance exists in the data source.
      operationId: 'ACL.exists__head_ACLs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ACL
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ACL.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
    put:
      tags:
        - ACL
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'ACL.replaceById__put_ACLs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
    delete:
      tags:
        - ACL
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ACL.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - ACL
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: ACL.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: ACL id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
  '/ACLs/{id}/replace':
    post:
      tags:
        - ACL
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'ACL.replaceById__post_ACLs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
  /ACLs/findOne:
    get:
      tags:
        - ACL
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ACL.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
  /ACLs/update:
    post:
      tags:
        - ACL
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ACL.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ACLs/count:
    get:
      tags:
        - ACL
      summary: Count instances of the model matched by where from the data source.
      operationId: ACL.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ACLs/change-stream:
    post:
      tags:
        - ACL
      summary: Create a change stream.
      operationId: ACL.createChangeStream__post_ACLs_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - ACL
      summary: Create a change stream.
      operationId: ACL.createChangeStream__get_ACLs_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/NGOs/{id}/nGOUser':
    get:
      tags:
        - NGO
      summary: Fetches belongsTo relation nGOUser.
      operationId: NGO.prototype.__get__nGOUser
      parameters:
        - name: id
          in: path
          description: NGO id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGOUser'
      deprecated: false
  /NGOs:
    post:
      tags:
        - NGO
      summary: Create a new instance of the model and persist it into the data source.
      operationId: NGO.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NGO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
    patch:
      tags:
        - NGO
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: NGO.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NGO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
    put:
      tags:
        - NGO
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: NGO.replaceOrCreate__put_NGOs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NGO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
    get:
      tags:
        - NGO
      summary: Find all instances of the model matched by filter from the data source.
      operationId: NGO.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/NGO'
      deprecated: false
  /NGOs/replaceOrCreate:
    post:
      tags:
        - NGO
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: NGO.replaceOrCreate__post_NGOs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NGO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
  /NGOs/upsertWithWhere:
    post:
      tags:
        - NGO
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: NGO.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/NGO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
  '/NGOs/{id}/exists':
    get:
      tags:
        - NGO
      summary: Check whether a model instance exists in the data source.
      operationId: 'NGO.exists__get_NGOs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/NGOs/{id}':
    head:
      tags:
        - NGO
      summary: Check whether a model instance exists in the data source.
      operationId: 'NGO.exists__head_NGOs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - NGO
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: NGO.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
    put:
      tags:
        - NGO
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'NGO.replaceById__put_NGOs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NGO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
    delete:
      tags:
        - NGO
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: NGO.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - NGO
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: NGO.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: NGO id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/NGO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
  '/NGOs/{id}/replace':
    post:
      tags:
        - NGO
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'NGO.replaceById__post_NGOs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NGO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
  /NGOs/findOne:
    get:
      tags:
        - NGO
      summary: Find first instance of the model matched by filter from the data source.
      operationId: NGO.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
  /NGOs/update:
    post:
      tags:
        - NGO
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: NGO.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/NGO'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /NGOs/count:
    get:
      tags:
        - NGO
      summary: Count instances of the model matched by where from the data source.
      operationId: NGO.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /NGOs/change-stream:
    post:
      tags:
        - NGO
      summary: Create a change stream.
      operationId: NGO.createChangeStream__post_NGOs_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - NGO
      summary: Create a change stream.
      operationId: NGO.createChangeStream__get_NGOs_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/NGOs/{id}/nGOUser/accessTokens/{fk}':
    get:
      tags:
        - NGO
      summary: Find a related item by id for accessTokens.
      operationId: NGO.prototype.__findById__nGOUser__accessTokens
      parameters:
        - name: id
          in: path
          description: NGO id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - NGO
      summary: Delete a related item by id for accessTokens.
      operationId: NGO.prototype.__destroyById__nGOUser__accessTokens
      parameters:
        - name: id
          in: path
          description: NGO id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - NGO
      summary: Update a related item by id for accessTokens.
      operationId: NGO.prototype.__updateById__nGOUser__accessTokens
      parameters:
        - name: id
          in: path
          description: NGO id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/NGOs/{id}/nGOUser/accessTokens':
    get:
      tags:
        - NGO
      summary: Queries accessTokens of NGOUser.
      operationId: NGO.prototype.__get__nGOUser__accessTokens
      parameters:
        - name: id
          in: path
          description: NGO id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - NGO
      summary: Creates a new instance in accessTokens of this model.
      operationId: NGO.prototype.__create__nGOUser__accessTokens
      parameters:
        - name: id
          in: path
          description: NGO id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - NGO
      summary: Deletes all accessTokens of this model.
      operationId: NGO.prototype.__delete__nGOUser__accessTokens
      parameters:
        - name: id
          in: path
          description: NGO id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/NGOs/{id}/nGOUser/accessTokens/count':
    get:
      tags:
        - NGO
      summary: Counts accessTokens of NGOUser.
      operationId: NGO.prototype.__count__nGOUser__accessTokens
      parameters:
        - name: id
          in: path
          description: NGO id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Chapters:
    post:
      tags:
        - Chapter
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Chapter.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Chapter'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chapter'
      deprecated: false
    patch:
      tags:
        - Chapter
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Chapter.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Chapter'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chapter'
      deprecated: false
    put:
      tags:
        - Chapter
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Chapter.replaceOrCreate__put_Chapters
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Chapter'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chapter'
      deprecated: false
    get:
      tags:
        - Chapter
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Chapter.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Chapter'
      deprecated: false
  /Chapters/replaceOrCreate:
    post:
      tags:
        - Chapter
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Chapter.replaceOrCreate__post_Chapters_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Chapter'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chapter'
      deprecated: false
  /Chapters/upsertWithWhere:
    post:
      tags:
        - Chapter
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Chapter.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Chapter'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chapter'
      deprecated: false
  '/Chapters/{id}/exists':
    get:
      tags:
        - Chapter
      summary: Check whether a model instance exists in the data source.
      operationId: 'Chapter.exists__get_Chapters_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Chapters/{id}':
    head:
      tags:
        - Chapter
      summary: Check whether a model instance exists in the data source.
      operationId: 'Chapter.exists__head_Chapters_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Chapter
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Chapter.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chapter'
      deprecated: false
    put:
      tags:
        - Chapter
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Chapter.replaceById__put_Chapters_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Chapter'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chapter'
      deprecated: false
    delete:
      tags:
        - Chapter
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Chapter.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Chapter
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Chapter.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Chapter id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Chapter'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chapter'
      deprecated: false
  '/Chapters/{id}/replace':
    post:
      tags:
        - Chapter
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Chapter.replaceById__post_Chapters_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Chapter'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chapter'
      deprecated: false
  /Chapters/findOne:
    get:
      tags:
        - Chapter
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Chapter.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chapter'
      deprecated: false
  /Chapters/update:
    post:
      tags:
        - Chapter
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Chapter.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Chapter'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Chapters/count:
    get:
      tags:
        - Chapter
      summary: Count instances of the model matched by where from the data source.
      operationId: Chapter.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Chapters/change-stream:
    post:
      tags:
        - Chapter
      summary: Create a change stream.
      operationId: Chapter.createChangeStream__post_Chapters_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Chapter
      summary: Create a change stream.
      operationId: Chapter.createChangeStream__get_Chapters_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/NGOUsers/{id}/accessTokens/{fk}':
    get:
      tags:
        - NGOUser
      summary: Find a related item by id for accessTokens.
      operationId: NGOUser.prototype.__findById__accessTokens
      parameters:
        - name: id
          in: path
          description: NGOUser id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - NGOUser
      summary: Delete a related item by id for accessTokens.
      operationId: NGOUser.prototype.__destroyById__accessTokens
      parameters:
        - name: id
          in: path
          description: NGOUser id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - NGOUser
      summary: Update a related item by id for accessTokens.
      operationId: NGOUser.prototype.__updateById__accessTokens
      parameters:
        - name: id
          in: path
          description: NGOUser id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/NGOUsers/{id}/accessTokens':
    get:
      tags:
        - NGOUser
      summary: Queries accessTokens of NGOUser.
      operationId: NGOUser.prototype.__get__accessTokens
      parameters:
        - name: id
          in: path
          description: NGOUser id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - NGOUser
      summary: Creates a new instance in accessTokens of this model.
      operationId: NGOUser.prototype.__create__accessTokens
      parameters:
        - name: id
          in: path
          description: NGOUser id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - NGOUser
      summary: Deletes all accessTokens of this model.
      operationId: NGOUser.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: NGOUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/NGOUsers/{id}/accessTokens/count':
    get:
      tags:
        - NGOUser
      summary: Counts accessTokens of NGOUser.
      operationId: NGOUser.prototype.__count__accessTokens
      parameters:
        - name: id
          in: path
          description: NGOUser id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /NGOUsers:
    post:
      tags:
        - NGOUser
      summary: Create a new instance of the model and persist it into the data source.
      operationId: NGOUser.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NGOUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGOUser'
      deprecated: false
    patch:
      tags:
        - NGOUser
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: NGOUser.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NGOUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGOUser'
      deprecated: false
    put:
      tags:
        - NGOUser
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: NGOUser.replaceOrCreate__put_NGOUsers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NGOUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGOUser'
      deprecated: false
    get:
      tags:
        - NGOUser
      summary: Find all instances of the model matched by filter from the data source.
      operationId: NGOUser.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/NGOUser'
      deprecated: false
  /NGOUsers/replaceOrCreate:
    post:
      tags:
        - NGOUser
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: NGOUser.replaceOrCreate__post_NGOUsers_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NGOUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGOUser'
      deprecated: false
  /NGOUsers/upsertWithWhere:
    post:
      tags:
        - NGOUser
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: NGOUser.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/NGOUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGOUser'
      deprecated: false
  '/NGOUsers/{id}/exists':
    get:
      tags:
        - NGOUser
      summary: Check whether a model instance exists in the data source.
      operationId: 'NGOUser.exists__get_NGOUsers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/NGOUsers/{id}':
    head:
      tags:
        - NGOUser
      summary: Check whether a model instance exists in the data source.
      operationId: 'NGOUser.exists__head_NGOUsers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - NGOUser
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: NGOUser.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGOUser'
      deprecated: false
    put:
      tags:
        - NGOUser
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'NGOUser.replaceById__put_NGOUsers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NGOUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGOUser'
      deprecated: false
    delete:
      tags:
        - NGOUser
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: NGOUser.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - NGOUser
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: NGOUser.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: NGOUser id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/NGOUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGOUser'
      deprecated: false
  '/NGOUsers/{id}/replace':
    post:
      tags:
        - NGOUser
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'NGOUser.replaceById__post_NGOUsers_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NGOUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGOUser'
      deprecated: false
  /NGOUsers/findOne:
    get:
      tags:
        - NGOUser
      summary: Find first instance of the model matched by filter from the data source.
      operationId: NGOUser.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGOUser'
      deprecated: false
  /NGOUsers/update:
    post:
      tags:
        - NGOUser
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: NGOUser.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/NGOUser'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /NGOUsers/count:
    get:
      tags:
        - NGOUser
      summary: Count instances of the model matched by where from the data source.
      operationId: NGOUser.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /NGOUsers/change-stream:
    post:
      tags:
        - NGOUser
      summary: Create a change stream.
      operationId: NGOUser.createChangeStream__post_NGOUsers_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - NGOUser
      summary: Create a change stream.
      operationId: NGOUser.createChangeStream__get_NGOUsers_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /NGOUsers/login:
    post:
      tags:
        - NGOUser
      summary: Login a user with username/email and password.
      operationId: NGOUser.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:

                - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)

            type: object
      deprecated: false
  /NGOUsers/logout:
    post:
      tags:
        - NGOUser
      summary: Logout a user with access token.
      operationId: NGOUser.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/NGOUsers/{id}/verify':
    post:
      tags:
        - NGOUser
      summary: Trigger user's identity verification with configured verifyOptions
      operationId: NGOUser.prototype.verify
      parameters:
        - name: id
          in: path
          description: NGOUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /NGOUsers/confirm:
    get:
      tags:
        - NGOUser
      summary: Confirm a user registration with identity verification token.
      operationId: NGOUser.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /NGOUsers/reset:
    post:
      tags:
        - NGOUser
      summary: Reset password for a user with email.
      operationId: NGOUser.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /NGOUsers/change-password:
    post:
      tags:
        - NGOUser
      summary: Change a user's password.
      operationId: NGOUser.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /NGOUsers/reset-password:
    post:
      tags:
        - NGOUser
      summary: Reset user's password via a password-reset token.
      operationId: NGOUser.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
tags:
  - name: User
  - name: ACL
  - name: NGO
  - name: Chapter
  - name: NGOUser
consumes:
  - application/json
  - application/x-www-form-urlencoded
  - application/xml
  - text/xml
produces:
  - application/json
  - application/xml
  - text/xml
  - application/javascript
  - text/javascript
definitions:
  x-any:
    properties: {}
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        $ref: '#/definitions/ObjectID'
    required:
      - id
    additionalProperties: false
  User:
    properties:
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  ACL:
    properties:
      model:
        description: The name of the model
        type: string
      property:
        description: 'The name of the property, method, scope, or relation'
        type: string
      accessType:
        type: string
      permission:
        type: string
      principalType:
        type: string
      principalId:
        type: string
      id:
        type: number
        format: double
    additionalProperties: false
  NGOUser:
    properties:
      name:
        type: string
      phone:
        type: string
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - name
      - phone
      - email
    additionalProperties: false
  NGO:
    properties:
      name:
        type: string
      mission:
        type: string
      id:
        $ref: '#/definitions/ObjectID'
      ngoUserId:
        $ref: '#/definitions/ObjectID'
    required:
      - name
      - mission
    additionalProperties: false
  Chapter:
    properties:
      name:
        type: string
      address:
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - name
      - address
    additionalProperties: false
  ObjectID:
    type: string
    pattern: '^[a-fA-F\d]{24}$'
